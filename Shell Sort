#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void shellSort(int arr[], int n, int *gapSequence, int gapSequenceSize) {
    for (int gap = gapSequence[gapSequenceSize - 1]; gap >= 1; gap = gapSequence[--gapSequenceSize]) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }
            arr[j] = temp;
        }
    }
}

int main() {
    int n = 10000;
    int arr[n];

    // Inicializando o array com valores aleatórios
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    // Sequências de intervalo
    int shellSequence[] = {1, 4, 13, 40, 121, 364};
    int knuthSequence[] = {1, 4, 13, 40, 121};
    int hibbardSequence[] = {1, 3, 7, 15, 31};

    // Cópias do array para cada sequência
    int arr1[n], arr2[n], arr3[n];
    for (int i = 0; i < n; i++) {
        arr1[i] = arr[i];
        arr2[i] = arr[i];
        arr3[i] = arr[i];
    }

    // Medindo o tempo de execução
    clock_t begin, end;
    double time_spent;

    // Shell Sequence
    begin = clock();
    shellSort(arr1, n, shellSequence, sizeof(shellSequence) / sizeof(shellSequence[0]));
    end = clock();
    time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    printf("Tempo de execução com a sequência de Shell: %f segundos\n", time_spent);

    // Knuth Sequence
    begin = clock();
    shellSort(arr2, n, knuthSequence, sizeof(knuthSequence) / sizeof(knuthSequence[0]));
    end = clock();
    time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    printf("Tempo de execução com a sequência de Knuth: %f segundos\n", time_spent);

    // Hibbard Sequence
    begin = clock();
    shellSort(arr3, n, hibbardSequence, sizeof(hibbardSequence) / sizeof(hibbardSequence[0]));
    end = clock();
    time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    printf("Tempo de execução com a sequência de Hibbard: %f segundos\n", time_spent);

    return 0;
}
