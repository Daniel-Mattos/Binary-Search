#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void merge(char arr[][100], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    char L[n1][100], R[n2][100];

    // Copiar dados para os arrays temporários L[] e R[]
    for (int i = 0; i < n1; i++)
        strcpy(L[i], arr[l + i]);
    for (int j = 0; j < n2; j++)
        strcpy(R[j], arr[m + 1 + j]);

    // Mesclar os arrays temporários de volta para arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (strcmp(L[i], R[j]) <= 0) {
            strcpy(arr[k], L[i]);
            i++;
        } else {
            strcpy(arr[k], R[j]);
            j++;
        }
        k++;
    }

    // Copiar os elementos restantes de L[], se houver
    while (i < n1) {
        strcpy(arr[k], L[i]);
        i++;
        k++;
    }

    // Copiar os elementos restantes de R[], se houver
    while (j < n2) {
        strcpy(arr[k], R[j]);
        j++;
        k++;
    }
}

void mergeSort(char arr[][100], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// Função para imprimir o array de strings
void printArray(char A[][100], int size) {
    for (int i = 0; i < size; i++)
        printf("%s ", A[i]);
}

int main() {
    char arr[][100] = {"c", "a", "e", "b", "d"};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Array original: \n");
    printArray(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);

    printf("\nArray ordenado: \n");
    printArray(arr, arr_size);
    return 0;
}
