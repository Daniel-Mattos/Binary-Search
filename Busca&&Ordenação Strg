#include <stdio.h>
#include <string.h>

// Função para comparar duas strings (usada como função de comparação em qsort)
int compareStrings(const void *a, const void *b) {
    return strcmp((char*)a, (char*)b);
}

// Merge Sort (adaptado para strings)
void merge(char arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    char L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (strcmp(L[i], R[j]) <= 0) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(char arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

// Quick Sort (adaptado para strings, usando qsort da biblioteca padrão)
void quickSort(char arr[], int low, int high) {
    qsort(arr + low, high - low + 1, sizeof(char *), compareStrings);
}

int main() {
    char arr[] = {"banana", "maçã", "laranja", "abacate"};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Usando Merge Sort
    mergeSort(arr, 0, n - 1);

    // Usando Quick Sort (com qsort)
    // quickSort(arr, 0, n - 1);

    // Imprimindo o array ordenado
    for (int i = 0; i < n; i++)
        printf("%s ", arr[i]);

    return 0;
}
